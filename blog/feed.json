{
    "version": "https://jsonfeed.org/version/1",
    "title": "Orbit.js Blog",
    "home_page_url": "https://orbitjs.com/blog",
    "description": "Orbit.js Blog",
    "items": [
        {
            "id": "/2022/01/31/v0-17-released",
            "content_html": "<p>After two years, 28 beta releases, and over 400 commits, Orbit v0.17 is finally\nready! 🎉</p><p>Orbit&#x27;s docs have been updated to reflect all the changes. If you are upgrading\nfrom v0.16, the place to start is the <a href=\"/docs/whats-new\">&quot;What&#x27;s new&quot;</a> section.</p><p>Some highlights of this release include:</p><ul><li><p><strong>New API reference docs</strong> <!-- -->—<!-- --> At long last, Orbit v0.17 has <a href=\"/docs/api\">API\ndocs</a> for all its packages. These docs are generated by\n<a href=\"https://typedoc.org/\">TypeDoc</a> from Orbit&#x27;s typings and code annotations.\nAlthough a bit sparse for now, this reference should only improve with time\nand help from the community.</p></li><li><p><strong>Improved, strict typings throughout</strong> <!-- -->—<!-- --> By improving the quality of\nOrbit&#x27;s TypeScript, we have been able to refactor more confidently, provide\nbetter documentation, and make for a better developer experience all around.</p></li><li><p><strong>Extraction of <code>@orbit/records</code> from <code>@orbit/data</code></strong> <!-- -->—<!-- --> As part of the\npush to improve typings, it became clear that <a href=\"/docs/api/data\"><code>@orbit/data</code></a>\ncontains a number of interfaces and classes that could prove useful for <em>any</em>\ntype of data, not just records. Thus, record-specific types and classes\nwere extracted into a new package: <a href=\"/docs/api/records\"><code>@orbit/records</code></a>.\nApologies for the breaking changes with module imports. We wanted to get this\nchurn out of the way before the semver constraints that will come with v1.0.</p></li><li><p><strong>Multi-expression queries</strong> <!-- -->—<!-- --> Just as transforms can contain multiple\noperations, queries can now contain multiple expressions. This allows sources,\nsuch as <code>JSONAPISource</code>, to optionally perform these expressions in parallel.</p></li><li><p><strong>Per-expression/operation options</strong> <!-- -->—<!-- --> Along with the move to\nmulti-expression queries, we&#x27;ve introduced per-expression options. This can be\nuseful if, for instance, you want to specify a different target <code>url</code> per\nexpression. Similarly, transform operations can also each have their own\noptions.</p></li><li><p><strong>Full vs. data-only responses</strong> <!-- -->—<!-- --> All requests (queries and updates)\ncan now be made with the <code>{ fullResponse: true }</code> option to receive responses\nin the form <code>{ data, details, transforms, sources }</code>. <code>data</code> will include the\nprimary data that would be returned without the <code>fullResponse</code> option.\n<code>details</code> includes response details particular to the source, and <code>sources</code>\nincludes a named map of all the responses from downstream sources that\nparticipated in this request. This allows you to access full response\ndocuments, inverse operations, etc. <em>from the initial request call point</em>.</p></li><li><p><strong>Deprecation of <code>Pullable</code> and <code>Pushable</code> interfaces</strong> <!-- -->—<!-- --> Now that\nresponses can include full processing details, everything that was unique to\nthe <code>push</code> and <code>pull</code> methods on source is redundant. The <code>Pullable</code> and\n<code>Pushable</code> interfaces have been deprecated to focus on the more capable\n<code>Queryable</code> and <code>Updatable</code> interfaces for making requests.</p></li><li><p><strong>Transform buffers for faster cache processing</strong> <!-- -->—<!-- --> Record-cache-based\nsources that interact with browser storage have had performance issues when\ndealing with large datasets, especially when paired with read/write heavy\nprocessors that ensure relationship tracking and correctness. A new paradigm\nhas been developed, the <code>RecordTransformBuffer</code>, that acts as a memory buffer\nfor these operations. For now, using this buffer is opt-in, with the <code>{\nuseBuffer: true }</code> option. You&#x27;ll be reminded to explicitly set this option to\neither <code>true</code> or <code>false</code> until you do. Early users are reporting promising\nresults with IndexedDB, such as <a href=\"https://github.com/orbitjs/orbit/issues/798#issuecomment-800544909\">performance boosts of &gt; 20x with large\nnumbers of\noperations</a>.</p></li><li><p><strong>New serializers</strong> <!-- -->—<!-- --> Concepts of serialization have, up until now, been\nvery specific to usage by the <code>JSONAPISource</code>, and particularly the\n<code>JSONAPISerializer</code> class. This class has been deprecated and replaced with a\nseries of composable serializers all built upon a simple and flexible\n<a href=\"/docs/api/serializers/interfaces/Serializer\"><code>Serializer</code></a> interface. This\ninterface, as well as some serializers for primitives (booleans, dates,\ndate-times, etc.) have been published in a new package,\n<a href=\"/docs/api/serializers\"><code>@orbit/serializers</code></a>. And of course, new serializers\nparticular to JSON:API have been added to\n<a href=\"/docs/api/jsonapi\"><code>@orbit/jsonapi</code></a>.</p></li><li><p><strong>New validators</strong> <!-- -->—<!-- --> A common source of problems for Orbit developers\nhas been using data that is malformed or doesn&#x27;t align with a schema&#x27;s\nexpectations. This can cause confusing errors during processing by a cache or\ndownstream source. To address this problem, we&#x27;re introducing &quot;validators&quot;,\nwhich are shipped in a new package <a href=\"/docs/api/validators\"><code>@orbit/validators</code></a>\nthat includes some validators for primitive types. Validators that are\nrecord-specific have also been included in\n<a href=\"/docs/api/records\"><code>@orbit/records</code></a>. By default, each source will build its\nown set of validators and use them automatically. You can instead share a\ncommon set of validators via the <code>validatorFor</code> settings. And you can opt-out\nof using validators entirely by configuring your sources with <code>{ autoValidate:\nfalse }</code>.</p></li><li><p><strong>Record normalizers</strong> <!-- -->—<!-- --> When building queries and transforms, some\nscenarios have been more tedious than necessary: identifying records by a key\ninstead of <code>id</code>, for instance, or using a model class from a lib like\nember-orbit to reference a record instead of its json identity. A new\nabstraction has been added to make query and transform builders more flexible:\nrecord normalizers. Record normalizers implement the\n<a href=\"/docs/api/records/interfaces/RecordNormalizer\"><code>RecordNormalizer</code></a> interface\nand convert record identities and/or data into a normalized form. The new base\nnormalizer now allows <code>{ type, key, value }</code> to be used anywhere that <code>{ type,\nid }</code> identities can be used, which significantly reduces the annoyance of\nworking with remote keys. Other normalizers,</p></li><li><p><strong>Synchronous change tracking in memory forks</strong> <!-- -->—<!-- --> Previously, memory\nsource forks behaved precisely like other memory sources: every trackable\nupdate applied at the source level (and thus async). Now, the default (but\noverrideable) behavior is to track changes at the cache level in forks. Thus\nsynchronous changes can be made to a forked cache and then merged back into\nthe base source. This better accomodates the most common use case for forks:\nediting form data in isolation before merging coalesced changes back to the\nbase.</p></li><li><p><strong>Debug mode</strong> <!-- -->—<!-- --> A new <code>debug</code> setting has been added to the <code>Orbit</code>\nglobal, that toggles between using a more verbose, developer-friendly &quot;debug&quot;\nmode of Orbit vs. a leaner, more performant production mode. Since debug mode\nis enabled by default, you&#x27;ll need to set <code>Orbit.debug = false</code> in order to\neliminate deprecation warnings and other debug-friendly messaging.</p></li><li><p><strong>Increased reliance on The Platform™</strong> <!-- -->—<!-- --> Orbit&#x27;s codebase continues to\nevolve with the web, adopting new ES language and web platform features as\nthey are released. Custom utilities have been gradually deprecated and phased\nout of the codebase (e.g. <code>isArray</code> -&gt; <code>Array.isArray</code>), new language features\nsuch as nullish coalescing and optional chaining have been adopted, and\nplatform features such as <code>crypto.randomUUID</code> have been adopted (with a\nfallback implementation if unavailable).</p></li></ul><p>These highlights are covered in more depth, including code samples, in the\n<a href=\"/docs/whats-new\">&quot;What&#x27;s new&quot;</a> section of the main guides.</p><p>Thanks for your patience with this release. We expect that v0.18 will not take\nnearly as long as v0.17 did. In fact, we plan to use this next release primarily\nto remove deprecated interfaces in preparation for a lean and focused v1.0\nrelease.</p>",
            "url": "https://orbitjs.com/blog/2022/01/31/v0-17-released",
            "title": "v0.17 is finally final!",
            "summary": "After two years, 28 beta releases, and over 400 commits, Orbit v0.17 is finally",
            "date_modified": "2022-01-31T00:00:00.000Z",
            "author": {
                "name": "Dan Gebhardt",
                "url": "https://github.com/dgeb"
            }
        },
        {
            "id": "/2021/07/16/welcome-to-the-new-orbitjs",
            "content_html": "<p>I&#x27;m excited to announce a complete refresh of Orbitjs.com! 🎉</p><p>Our site has been rebuilt using <a href=\"https://docusaurus.io/\">Docusaurus</a>. The\nsource for this site now lives in <a href=\"https://github.com/orbitjs/orbit/tree/main/website\">Orbit&#x27;s\nmonorepo</a> right alongside\nthe packages that it describes. This will make it easier to update docs along\nwith code, preferably even in the same PRs.</p><p>I&#x27;m especially excited to announce that we are finally publishing API reference\ndocs, generated with <a href=\"https://typedoc.org/\">TypeDoc</a>, alongside the Orbit\nguides. The first API docs available are for the upcoming v0.17, which can be\naccessed directly <a href=\"/docs/api/\">here</a> or by choosing from the documentation\nversion selector in the upper right.</p><p>While the current API docs are much better than nothing, the prose and examples\nare pretty thin for most packages. Please be patient as we work to fill out\nthese docs through improved code annotations. Community contributions are\nencouraged and most welcome! ❤️</p>",
            "url": "https://orbitjs.com/blog/2021/07/16/welcome-to-the-new-orbitjs",
            "title": "Welcome to the new Orbitjs.com",
            "summary": "I'm excited to announce a complete refresh of Orbitjs.com! 🎉",
            "date_modified": "2021-07-16T00:00:00.000Z",
            "author": {
                "name": "Dan Gebhardt",
                "url": "https://github.com/dgeb"
            }
        }
    ]
}