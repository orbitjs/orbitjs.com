<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://orbitjs.com/blog</id>
    <title>Orbit.js Blog</title>
    <updated>2022-01-31T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://orbitjs.com/blog"/>
    <subtitle>Orbit.js Blog</subtitle>
    <icon>https://orbitjs.com/img/favicon.ico</icon>
    <rights>Copyright © 2014-2022 Cerebris Corporation</rights>
    <entry>
        <title type="html"><![CDATA[v0.17 is finally final!]]></title>
        <id>/2022/01/31/v0-17-released</id>
        <link href="https://orbitjs.com/blog/2022/01/31/v0-17-released"/>
        <updated>2022-01-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After two years, 28 beta releases, and over 400 commits, Orbit v0.17 is finally]]></summary>
        <content type="html"><![CDATA[<p>After two years, 28 beta releases, and over 400 commits, Orbit v0.17 is finally
ready! 🎉</p><p>Orbit&#x27;s docs have been updated to reflect all the changes. If you are upgrading
from v0.16, the place to start is the overview of <a href="/docs/whats-new">what&#x27;s
new</a>.</p><p>Some highlights of this release include:</p><ul><li><p><strong>New API reference docs</strong> <!-- -->—<!-- --> At long last, Orbit v0.17 has <a href="/docs/api">API
docs</a> for all its packages. These docs are generated by
<a href="https://typedoc.org/">TypeDoc</a> from Orbit&#x27;s typings and code annotations.
Although a bit sparse for now, this reference should only improve with time
and help from the community.</p></li><li><p><strong>Improved, strict typings throughout</strong> <!-- -->—<!-- --> By improving the quality of
Orbit&#x27;s TypeScript, we have been able to refactor more confidently, provide
better documentation, and make for a better developer experience all around.</p></li><li><p><strong>Extraction of <code>@orbit/records</code> from <code>@orbit/data</code></strong> <!-- -->—<!-- --> As part of the
push to improve typings, it became clear that <a href="/docs/api/data"><code>@orbit/data</code></a>
contains a number of interfaces and classes that could prove useful for <em>any</em>
type of data, not just records. Thus, record-specific types and classes
were extracted into a new package: <a href="/docs/api/records"><code>@orbit/records</code></a>.
Apologies for the breaking changes with module imports. We wanted to get this
churn out of the way before the semver constraints that will come with v1.0.</p></li><li><p><strong>Multi-expression queries</strong> <!-- -->—<!-- --> Just as transforms can contain multiple
operations, queries can now contain multiple expressions. This allows sources,
such as <code>JSONAPISource</code>, to optionally perform these expressions in parallel.</p></li><li><p><strong>Per-expression/operation options</strong> <!-- -->—<!-- --> Along with the move to
multi-expression queries, we&#x27;ve introduced per-expression options. This can be
useful if, for instance, you want to specify a different target <code>url</code> per
expression. Similarly, transform operations can also each have their own
options.</p></li><li><p><strong>Full vs. data-only responses</strong> <!-- -->—<!-- --> All requests (queries and updates)
can now be made with the <code>{ fullResponse: true }</code> option to receive responses
in the form <code>{ data, details, transforms, sources }</code>. <code>data</code> will include the
primary data that would be returned without the <code>fullResponse</code> option.
<code>details</code> includes response details particular to the source, and <code>sources</code>
includes a named map of all the responses from downstream sources that
participated in this request. This allows you to access full response
documents, inverse operations, etc. <em>from the initial request call point</em>.</p></li><li><p><strong>Deprecation of <code>Pullable</code> and <code>Pushable</code> interfaces</strong> <!-- -->—<!-- --> Now that
responses can include full processing details, everything that was unique to
the <code>push</code> and <code>pull</code> methods on source is redundant. The <code>Pullable</code> and
<code>Pushable</code> interfaces have been deprecated to focus on the more capable
<code>Queryable</code> and <code>Updatable</code> interfaces for making requests.</p></li><li><p><strong>Transform buffers for faster cache processing</strong> <!-- -->—<!-- --> Record-cache-based
sources that interact with browser storage have had performance issues when
dealing with large datasets, especially when paired with read/write heavy
processors that ensure relationship tracking and correctness. A new paradigm
has been developed, the <code>RecordTransformBuffer</code>, that acts as a memory buffer
for these operations. For now, using this buffer is opt-in, with the <code>{
useBuffer: true }</code> option. You&#x27;ll be reminded to explicitly set this option to
either <code>true</code> or <code>false</code> until you do. Early users are reporting promising
results with IndexedDB, such as <a href="https://github.com/orbitjs/orbit/issues/798#issuecomment-800544909">performance boosts of &gt; 20x with large
numbers of
operations</a>.</p></li><li><p><strong>New serializers</strong> <!-- -->—<!-- --> Concepts of serialization have, up until now, been
very specific to usage by the <code>JSONAPISource</code>, and particularly the
<code>JSONAPISerializer</code> class. This class has been deprecated and replaced with a
series of composable serializers all built upon a simple and flexible
<a href="/docs/api/serializers/interfaces/Serializer"><code>Serializer</code></a> interface. This
interface, as well as some serializers for primitives (booleans, dates,
date-times, etc.) have been published in a new package,
<a href="/docs/api/serializers"><code>@orbit/serializers</code></a>. And of course, new serializers
particular to JSON:API have been added to
<a href="/docs/api/jsonapi"><code>@orbit/jsonapi</code></a>.</p></li><li><p><strong>New validators</strong> <!-- -->—<!-- --> A common source of problems for Orbit developers
has been using data that is malformed or doesn&#x27;t align with a schema&#x27;s
expectations. This can cause confusing errors during processing by a cache or
downstream source. To address this problem, we&#x27;re introducing &quot;validators&quot;,
which are shipped in a new package <a href="/docs/api/validators"><code>@orbit/validators</code></a>
that includes some validators for primitive types. Validators that are
record-specific have also been included in
<a href="/docs/api/records"><code>@orbit/records</code></a>. By default, each source will build its
own set of validators and use them automatically. You can instead share a
common set of validators via the <code>validatorFor</code> settings. And you can opt-out
of using validators entirely by configuring your sources with <code>{ autoValidate:
false }</code>.</p></li><li><p><strong>Record normalizers</strong> <!-- -->—<!-- --> When building queries and transforms, some
scenarios have been more tedious than necessary: identifying records by a key
instead of <code>id</code>, for instance, or using a model class from a lib like
ember-orbit to reference a record instead of its json identity. A new
abstraction has been added to make query and transform builders more flexible:
record normalizers. Record normalizers implement the
<a href="/docs/api/records/interfaces/RecordNormalizer"><code>RecordNormalizer</code></a> interface
and convert record identities and/or data into a normalized form. The new base
normalizer now allows <code>{ type, key, value }</code> to be used anywhere that <code>{ type,
id }</code> identities can be used, which significantly reduces the annoyance of
working with remote keys. Other normalizers,</p></li><li><p><strong>Synchronous change tracking in memory forks</strong> <!-- -->—<!-- --> Previously, memory
source forks behaved precisely like other memory sources: every trackable
update applied at the source level (and thus async). Now, the default (but
overrideable) behavior is to track changes at the cache level in forks. Thus
synchronous changes can be made to a forked cache and then merged back into
the base source. This better accomodates the most common use case for forks:
editing form data in isolation before merging coalesced changes back to the
base.</p></li><li><p><strong>Debug mode</strong> <!-- -->—<!-- --> A new <code>debug</code> setting has been added to the <code>Orbit</code>
global, that toggles between using a more verbose, developer-friendly &quot;debug&quot;
mode of Orbit vs. a leaner, more performant production mode. Since debug mode
is enabled by default, you&#x27;ll need to set <code>Orbit.debug = false</code> in order to
eliminate deprecation warnings and other debug-friendly messaging.</p></li><li><p><strong>Increased reliance on The Platform™</strong> <!-- -->—<!-- --> Orbit&#x27;s codebase continues to
evolve with the web, adopting new ES language and web platform features as
they are released. Custom utilities have been gradually deprecated and phased
out of the codebase (e.g. <code>isArray</code> -&gt; <code>Array.isArray</code>), new language features
such as nullish coalescing and optional chaining have been adopted, and
platform features such as <code>crypto.randomUUID</code> have been adopted (with a
fallback implementation if unavailable).</p></li></ul><p>Thanks for your patience with this release. We expect that v0.18 will not take
nearly as long as v0.17 did. In fact, we plan to use this next release primarily
to remove deprecated interfaces in preparation for a lean and focused v1.0
release.</p>]]></content>
        <author>
            <name>Dan Gebhardt</name>
            <uri>https://github.com/dgeb</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome to the new Orbitjs.com]]></title>
        <id>/2021/07/16/welcome-to-the-new-orbitjs</id>
        <link href="https://orbitjs.com/blog/2021/07/16/welcome-to-the-new-orbitjs"/>
        <updated>2021-07-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm excited to announce a complete refresh of Orbitjs.com! 🎉]]></summary>
        <content type="html"><![CDATA[<p>I&#x27;m excited to announce a complete refresh of Orbitjs.com! 🎉</p><p>Our site has been rebuilt using <a href="https://docusaurus.io/">Docusaurus</a>. The
source for this site now lives in <a href="https://github.com/orbitjs/orbit/tree/main/website">Orbit&#x27;s
monorepo</a> right alongside
the packages that it describes. This will make it easier to update docs along
with code, preferably even in the same PRs.</p><p>I&#x27;m especially excited to announce that we are finally publishing API reference
docs, generated with <a href="https://typedoc.org/">TypeDoc</a>, alongside the Orbit
guides. The first API docs available are for the upcoming v0.17, which can be
accessed directly <a href="/docs/api/">here</a> or by choosing from the documentation
version selector in the upper right.</p><p>While the current API docs are much better than nothing, the prose and examples
are pretty thin for most packages. Please be patient as we work to fill out
these docs through improved code annotations. Community contributions are
encouraged and most welcome! ❤️</p>]]></content>
        <author>
            <name>Dan Gebhardt</name>
            <uri>https://github.com/dgeb</uri>
        </author>
    </entry>
</feed>