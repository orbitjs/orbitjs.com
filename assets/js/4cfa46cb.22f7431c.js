(self.webpackChunkorbit_website=self.webpackChunkorbit_website||[]).push([[4215],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2903:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={title:"Coordination strategies"},l=void 0,c={unversionedId:"coordination",id:"coordination",isDocsHomePage:!1,title:"Coordination strategies",description:"Orbit provides another layer of abstraction on top of direct event observation",source:"@site/docs/coordination.md",sourceDirName:".",slug:"/coordination",permalink:"/docs/next/coordination",editUrl:"https://github.com/orbitjs/orbit/edit/main/website/docs/coordination.md",version:"current",frontMatter:{title:"Coordination strategies"},sidebar:"docs",previous:{title:"Data flows",permalink:"/docs/next/data-flows"},next:{title:"Memory sources",permalink:"/docs/next/memory-sources"}},d=[{value:"Why use a coordinator?",id:"why-use-a-coordinator",children:[]},{value:"Creating a coordinator",id:"creating-a-coordinator",children:[]},{value:"Activating a coordinator",id:"activating-a-coordinator",children:[]},{value:"Deactivating a coordinator",id:"deactivating-a-coordinator",children:[]},{value:"Coordination strategies",id:"coordination-strategies",children:[{value:"Request strategies",id:"request-strategies",children:[]},{value:"Sync strategies",id:"sync-strategies",children:[]},{value:"Event logging strategies",id:"event-logging-strategies",children:[]},{value:"Log truncation strategies",id:"log-truncation-strategies",children:[]}]},{value:"Using hints",id:"using-hints",children:[{value:"Why use hints?",id:"why-use-hints",children:[]},{value:"How can you use hints?",id:"how-can-you-use-hints",children:[]},{value:"Caveats to using hints",id:"caveats-to-using-hints",children:[]}]}],u={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Orbit provides another layer of abstraction on top of direct event observation\nand handling: a ",(0,o.kt)("inlineCode",{parentName:"p"},"Coordinator"),". A coordinator manages a set of sources to which\nit applies a set of coordination strategies."),(0,o.kt)("h2",{id:"why-use-a-coordinator"},"Why use a coordinator?"),(0,o.kt)("p",null,"Since configuring event handlers is so straightforward, what's the point of\nusing a coordinator? There are several benefits:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can easily add preconfigured strategies, such as an event logging\nstrategy and a log truncation strategy (to keep the size of in-memory logs\nto a minimum). You can also create your own strategies and share them across\napplications.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Strategies can be activated ",(0,o.kt)("em",{parentName:"p"},"and deactivated")," all together by simply calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"coordinator.activate()")," / ",(0,o.kt)("inlineCode",{parentName:"p"},"coordinator.deactivate()"),". Deactivating\nevent handlers directly requires careful tracking of handler functions, which\ncan be tedious. However, it's important to do this to avoid leaking memory.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Coordinators can share a log-level across all strategies. Sometimes you want\nto see debug info and sometimes only errors."))),(0,o.kt)("h2",{id:"creating-a-coordinator"},"Creating a coordinator"),(0,o.kt)("p",null,"A coordinator is typically shared across an application and manages all of the\ncoordination strategies between sources."),(0,o.kt)("p",null,"A coordinator can be created with sources and strategies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import Coordinator from "@orbit/coordinator";\n\nconst coordinator = new Coordinator({\n  sources: [memory, backup],\n  strategies: [backupMemorySync]\n});\n')),(0,o.kt)("p",null,"Or sources and strategies can be added / removed any time the coordinator is\ninactive:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import Coordinator from "@orbit/coordinator";\n\nconst coordinator = new Coordinator();\n\ncoordinator.addSource(memory);\ncoordinator.addSource(backup);\ncoordinator.addStrategy(backupMemorySync);\n')),(0,o.kt)("h2",{id:"activating-a-coordinator"},"Activating a coordinator"),(0,o.kt)("p",null,"A coordinator won't actually do anything until it's been \"activated\", which is\nan async process that activates all of the coordinator's strategies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'coordinator.activate().then(() => {\n  console.log("Coordinator is active");\n});\n')),(0,o.kt)("p",null,"Note that you can assign a log-level when activating a coordinator, and it\nwill be applied to all of the coordinator's strategies:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { LogLevel } from "@orbit/coordinator";\n\ncoordinator.activate({ logLevel: LogLevel.Info }).then(() => {\n  console.log("Coordinator will be chatty");\n});\n')),(0,o.kt)("p",null,"Possible log levels include ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Errors"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Warnings"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"Info"),"."),(0,o.kt)("h2",{id:"deactivating-a-coordinator"},"Deactivating a coordinator"),(0,o.kt)("p",null,"If you want to temporarily disable a coordinator or change its settings, you\ncan deactivate it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'coordinator.deactivate().then(() => {\n  console.log("Coordinator is inactive");\n});\n')),(0,o.kt)("p",null,"At this point you can add/remove strategies and/or sources."),(0,o.kt)("h2",{id:"coordination-strategies"},"Coordination strategies"),(0,o.kt)("p",null,"Every ",(0,o.kt)("inlineCode",{parentName:"p"},"Strategy")," has certain properties, including a name, the names of sources\nto which it applies, a log level, and a log prefix."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@orbit/coordinator")," ships with several standard strategies, which are\ndiscussed below. It's also straightforward to create your own custom\nstrategies."),(0,o.kt)("h3",{id:"request-strategies"},"Request strategies"),(0,o.kt)("p",null,"Request strategies participate in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/data-flows"},"request flow"),". Every\nrequest strategy should be defined with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source")," - the name of the observed source"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"on")," - the name of the event to observe"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"target")," - the name of the target source"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"action")," - the name of the action on ",(0,o.kt)("inlineCode",{parentName:"li"},"target")," that should be invoked"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blocking")," - a boolean indicating whether to block the completion of the\nobserved event until the action on the target has been processed")),(0,o.kt)("p",null,"Here are some example strategies that query / update a remote server\npessimistically whenever a memory source is queried / updated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { RequestStrategy } from "@orbit/coordinator";\n\n// Query the remote server whenever the memory source is queried\ncoordinator.addStrategy(\n  new RequestStrategy({\n    source: "memory",\n    on: "beforeQuery",\n\n    target: "remote",\n    action: "pull",\n\n    blocking: true\n  })\n);\n\n// Update the remote server whenever the memory source is updated\ncoordinator.addStrategy(\n  new RequestStrategy({\n    source: "memory",\n    on: "beforeUpdate",\n\n    target: "remote",\n    action: "push",\n\n    blocking: true\n  })\n);\n')),(0,o.kt)("p",null,"It's possible to apply a filter function to a strategy so that it only applies\nto certain data. For instance, the following filter limits which queries should\nbe handled by a remote server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { RequestStrategy } from "@orbit/coordinator";\n\n// Only forward requests for planets on to the remote server\ncoordinator.addStrategy(\n  new RequestStrategy({\n    source: "memory",\n    on: "beforeQuery",\n\n    target: "remote",\n    action: "pull",\n\n    blocking: true,\n\n    filter(query) {\n      return (\n        query.expressions.op === "findRecords" &&\n        query.expressions.type === "planet"\n      );\n    }\n  })\n);\n')),(0,o.kt)("h3",{id:"sync-strategies"},"Sync strategies"),(0,o.kt)("p",null,"Sync strategies participate in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/data-flows"},"sync flow"),". Every\nsync strategy should be defined with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"source")," - the name of the observed source"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"target")," - the name of the target source"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blocking")," - a boolean indicating whether to block the completion of the\nobserved event until the action on the target has been processed")),(0,o.kt)("p",null,"Sync strategies only observe the ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," event and apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," method\non the ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,o.kt)("p",null,"The following strategy synchronizes any changes to the ",(0,o.kt)("inlineCode",{parentName:"p"},"remote")," source with a\n",(0,o.kt)("inlineCode",{parentName:"p"},"memory")," source:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { SyncStrategy } from "@orbit/coordinator";\n\n// Sync all changes received from the remote server to the memory source\ncoordinator.addStrategy(\n  new SyncStrategy({\n    source: "remote",\n    target: "memory",\n    blocking: true\n  })\n);\n')),(0,o.kt)("p",null,"As described above for request strategies, sync strategies can also accept a\n",(0,o.kt)("inlineCode",{parentName:"p"},"filter")," function to limit the applicability of a strategy. This can be useful\nto, say, only backup certain types of data to browser storage."),(0,o.kt)("h3",{id:"event-logging-strategies"},"Event logging strategies"),(0,o.kt)("p",null,"An event logging strategy can be applied to log events on all sources to the\nconsole. By default, all events will be logged on all sources registered to a\ncoordinator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { EventLoggingStrategy } from "@orbit/coordinator";\n\ncoordinator.addStrategy(new EventLoggingStrategy());\n')),(0,o.kt)("p",null,"You may wish to only observe events on certain interfaces, which can be\nspecified as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'coordinator.addStrategy(\n  new EventLoggingStrategy({\n    interfaces: ["updatable", "pushable", "syncable"]\n  })\n);\n')),(0,o.kt)("p",null,"Valid interfaces include ",(0,o.kt)("inlineCode",{parentName:"p"},"updatable"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"queryable"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pushable"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"pullable"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"syncable")," (note the lower case)."),(0,o.kt)("p",null,"Furthermore, you may wish to only observe certain sources, which can be\nspecified by name:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'coordinator.addStrategy(\n  new EventLoggingStrategy({\n    sources: ["remote", "memory"]\n  })\n);\n')),(0,o.kt)("p",null,"The event logging strategy will respect the log level that is specified when\nthe coordinator is activated."),(0,o.kt)("h3",{id:"log-truncation-strategies"},"Log truncation strategies"),(0,o.kt)("p",null,"Sources have another kind of log as well: a transform log, which tracks\ntransforms that are applied. As changes are applied to sources, their transform\nlogs grow in size. A log truncation strategy will keep the size of transform\nlogs in check. It observes the sources associated with the strategy and\ntruncates their transform logs when a common transform has been applied to them\nall."),(0,o.kt)("p",null,"To add a log truncation strategy that applies to all sources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import { LogTruncationStrategy } from "@orbit/coordinator";\n\ncoordinator.addStrategy(new LogTruncationStrategy());\n')),(0,o.kt)("p",null,"To limit the strategy to apply to only specific sources:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'coordinator.addStrategy(\n  new LogTruncationStrategy({\n    sources: ["backup", "memory"]\n  })\n);\n')),(0,o.kt)("h2",{id:"using-hints"},"Using hints"),(0,o.kt)("p",null,'Orbit v0.16 introduced the concept of "hints", which allow request listeners to\ninfluence the results that a source returns from that request.'),(0,o.kt)("h3",{id:"why-use-hints"},"Why use hints?"),(0,o.kt)("p",null,"The main reason to use hints is to allow sources to take into account outside\ninformation when processing a request. For instance, let's say that a user\nqueries a memory source and wants records returned in the same order they're\nreturned from the server. If the server is using a complex sorting algorithm, it\nmay be impossible to recreate that same logic (and full dataset) on the client\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"MemorySource"),"."),(0,o.kt)("h3",{id:"how-can-you-use-hints"},"How can you use hints?"),(0,o.kt)("p",null,"Hints are only available to methods that are part of the request flow, such as\n",(0,o.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"update"),". Hints are returned by listeners to ",(0,o.kt)("inlineCode",{parentName:"p"},"before[X]")," events to\naid in the fulfillment of ",(0,o.kt)("inlineCode",{parentName:"p"},"[X]")," requests. They can only be applied in a blocking\nfashion - otherwise the request may be fulfilled prior to the hint being\nreturned."),(0,o.kt)("p",null,"Let's work through an example using hints to influence the results of a\n",(0,o.kt)("inlineCode",{parentName:"p"},"MemorySource")," query based upon the records returned from the same query applied\nto a ",(0,o.kt)("inlineCode",{parentName:"p"},"JSONAPISource"),"."),(0,o.kt)("p",null,"You'll start by creating a new ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestStrategy")," that ensures that when the\n",(0,o.kt)("inlineCode",{parentName:"p"},"memory")," (",(0,o.kt)("inlineCode",{parentName:"p"},"MemorySource"),") is queried, the ",(0,o.kt)("inlineCode",{parentName:"p"},"remote")," (",(0,o.kt)("inlineCode",{parentName:"p"},"JSONAPISource"),") source will\nbe too:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'coordinator.addStrategy(\n  new RequestStrategy({\n    source: "memory",\n    target: "remote",\n    on: "beforeQuery",\n    action: "query",\n    blocking: true,\n    passHints: true\n  })\n);\n')),(0,o.kt)("p",null,"Several things to note here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blocking: true")," is strictly required for hints to function."),(0,o.kt)("li",{parentName:"ul"},"The results of ",(0,o.kt)("inlineCode",{parentName:"li"},"action")," will be sent as hints, so the method needs to return records as results. ",(0,o.kt)("inlineCode",{parentName:"li"},"query")," will work, but ",(0,o.kt)("inlineCode",{parentName:"li"},"pull")," will not."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"passHints: true")," tells the strategy to actually pass the results of ",(0,o.kt)("inlineCode",{parentName:"li"},"remote.query")," as hints.")),(0,o.kt)("p",null,"You'll also want to create a blocking ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncStrategy")," that syncs any transforms applied to the ",(0,o.kt)("inlineCode",{parentName:"p"},"remote")," source back to the ",(0,o.kt)("inlineCode",{parentName:"p"},"memory")," source:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'coordinator.addStrategy(\n  new SyncStrategy({\n    source: "remote",\n    target: "memory",\n    blocking: true\n  })\n);\n')),(0,o.kt)("p",null,"The strategy will ensure that data will be populated in the ",(0,o.kt)("inlineCode",{parentName:"p"},"memory")," source entirely before it attempts to fulfill the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," result."),(0,o.kt)("p",null,"Now, when ",(0,o.kt)("inlineCode",{parentName:"p"},"memory.query(q => q.findRecords('planet'))")," is issued, the records returned should still come from the ",(0,o.kt)("inlineCode",{parentName:"p"},"memory")," source, but their identities and order should match the records returned from ",(0,o.kt)("inlineCode",{parentName:"p"},"remote.query(q => q.findRecords('planet'))"),"."),(0,o.kt)("h3",{id:"caveats-to-using-hints"},"Caveats to using hints"),(0,o.kt)("p",null,"Hints have only been fully tested with the ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," events and the standard sources."))}p.isMDXComponent=!0}}]);