(self.webpackChunkorbit_website=self.webpackChunkorbit_website||[]).push([[1380],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,f=u["".concat(d,".").concat(m)]||u[m]||c[m]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5414:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],p={title:"Updating data"},d=void 0,s={unversionedId:"updating-data",id:"version-0.16/updating-data",isDocsHomePage:!1,title:"Updating data",description:"Data in a source can be updated by applying a transform, which consists of one",source:"@site/versioned_docs/version-0.16/updating-data.md",sourceDirName:".",slug:"/updating-data",permalink:"/docs/updating-data",editUrl:"https://github.com/orbitjs/orbit/edit/main/website/versioned_docs/version-0.16/updating-data.md",version:"0.16",frontMatter:{title:"Updating data"},sidebar:"version-0.16/docsSidebar",previous:{title:"Data sources",permalink:"/docs/data-sources"},next:{title:"Querying data",permalink:"/docs/querying-data"}},l=[{value:"Operations",id:"operations",children:[]},{value:"Transforms",id:"transforms",children:[{value:"Standard transforms",id:"standard-transforms",children:[]},{value:"Transform options",id:"transform-options",children:[]}]}],c={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Data in a source can be updated by applying a transform, which consists of one\nor more operations. Transforms must be applied atomically\u2014all operations\nsucceed or fail together."),(0,o.kt)("h2",{id:"operations"},"Operations"),(0,o.kt)("p",null,"Operations each represent a single change to a record or relationship (e.g.\nadding a record, updating a field, deleting a relationship, etc.)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Operation")," interface requires one member:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"op")," - a string identifying the type of operation")),(0,o.kt)("p",null,"The other members of an ",(0,o.kt)("inlineCode",{parentName:"p"},"Operation")," are specific to the ",(0,o.kt)("inlineCode",{parentName:"p"},"op"),"."),(0,o.kt)("p",null,"The following standard operations are defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"@orbit/data"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'interface Operation {\n  op: string;\n}\n\ninterface AddRecordOperation extends Operation {\n  op: "addRecord";\n  record: Record;\n}\n\ninterface UpdateRecordOperation extends Operation {\n  op: "updateRecord";\n  record: Record;\n}\n\ninterface RemoveRecordOperation extends Operation {\n  op: "removeRecord";\n  record: RecordIdentity;\n}\n\ninterface ReplaceKeyOperation extends Operation {\n  op: "replaceKey";\n  record: RecordIdentity;\n  key: string;\n  value: string;\n}\n\ninterface ReplaceAttributeOperation extends Operation {\n  op: "replaceAttribute";\n  record: RecordIdentity;\n  attribute: string;\n  value: any;\n}\n\ninterface AddToRelatedRecordsOperation extends Operation {\n  op: "addToRelatedRecords";\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecord: RecordIdentity;\n}\n\ninterface RemoveFromRelatedRecordsOperation extends Operation {\n  op: "removeFromRelatedRecords";\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecord: RecordIdentity;\n}\n\ninterface ReplaceRelatedRecordsOperation extends Operation {\n  op: "replaceRelatedRecords";\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecords: RecordIdentity[];\n}\n\ninterface ReplaceRelatedRecordOperation extends Operation {\n  op: "replaceRelatedRecord";\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecord: RecordIdentity;\n}\n')),(0,o.kt)("h2",{id:"transforms"},"Transforms"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Transform")," interface has the following members:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id")," - a string that uniquely identifies the transform"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"operations")," - an array of ",(0,o.kt)("inlineCode",{parentName:"li"},"Operation")," objects"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options")," - an optional object that represents options that can influence how\na transform is processed")),(0,o.kt)("p",null,'Although transforms can be created "manually", you\'ll probably find it easier\nto use a builder function that returns a transform.'),(0,o.kt)("p",null,"To use a transform builder, pass a function into a source's method that expects\na transform, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"push"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"TranformBuilder")," that's compatible\nwith the source should be applied as an argument. You can then use this builder\nto create one or more operations."),(0,o.kt)("p",null,"For instance, here's how you might update a memory source with a single record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const earth = {\n  type: "planet",\n  id: "earth",\n  attributes: {\n    name: "Earth"\n  }\n};\n\nmemory.update(t => t.addRecord(earth));\n')),(0,o.kt)("p",null,"To perform more than one operation in a single transform, just return an array\nof operations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"memory.update(t => [t.addRecord(earth), t.addRecord(jupiter)]);\n")),(0,o.kt)("h3",{id:"standard-transforms"},"Standard transforms"),(0,o.kt)("p",null,"You can use the standard ",(0,o.kt)("inlineCode",{parentName:"p"},"@orbit/data")," transform builder as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Adding a new record\nmemory.update(t =>\n  t.addRecord({\n    type: "planet",\n    id: "earth",\n    attributes: {\n      name: "Earth"\n    }\n  })\n);\n\n// Updating a record\nmemory.update(t =>\n  t.updateRecord({\n    type: "planet",\n    id: "earth",\n    attributes: {\n      name: "Earth",\n      classification: "terrestrial",\n      atmosphere: true\n    }\n  })\n);\n\n// Removing a record\nmemory.update(t => t.removeRecord({ type: "planet", id: "earth" }));\n\n// Replacing a key\nmemory.update(t =>\n  t.replaceKey({ type: "planet", id: "earth" }, "remoteId", "abc123")\n);\n\n// Replacing an attribute\nmemory.update(t =>\n  t.replaceAttribute(\n    { type: "planet", id: "earth" },\n    "classification",\n    "gaseous"\n  )\n);\n\n// Adding a member to a to-many relationship\nmemory.update(t =>\n  t.addToRelatedRecords({ type: "planet", id: "jupiter" }, "moons", {\n    type: "moon",\n    id: "io"\n  })\n);\n\n// Removing a member from a to-many relationship\nmemory.update(t =>\n  t.removeFromRelatedRecords({ type: "planet", id: "jupiter" }, "moons", {\n    type: "moon",\n    id: "io"\n  })\n);\n\n// Replacing every member of a to-many relationship\nmemory.update(t =>\n  t.replaceRelatedRecords({ type: "planet", id: "jupiter" }, "moons", [\n    { type: "moon", id: "io" },\n    { type: "moon", id: "europa" }\n  ])\n);\n\n// Replacing a to-one relationship\nmemory.update(t =>\n  t.replaceRelatedRecord({ type: "planet", id: "jupiter" }, "solarSystem", {\n    type: "solarSystem",\n    id: "ourSolarSystem"\n  })\n);\n')),(0,o.kt)("h3",{id:"transform-options"},"Transform options"),(0,o.kt)("p",null,"Options can be added to transforms to provide processing instructions to\nparticular sources and to include metadata about transforms."),(0,o.kt)("p",null,"For example, the following transform is given a ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," and contains\ninstructions for the source named ",(0,o.kt)("inlineCode",{parentName:"p"},"remote"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'memory.update(\n  t =>\n    t.updateRecord({\n      type: "planet",\n      id: "earth",\n      attributes: {\n        name: "Earth",\n        classification: "terrestrial",\n        atmosphere: true\n      }\n    }),\n  {\n    label: "Update planet Earth",\n    sources: {\n      remote: {\n        timeout: 100000\n      }\n    }\n  }\n);\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," can be useful for providing an understanding of actions that have been\nqueued for processing."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sources: { ${sourceName}: sourceSpecificOptions }")," pattern is used to pass\noptions that only a particular source will understand when processing a\ntransform. In this instance, we're telling our remote source to use a custom\ntimeout when performing this particular update."))}u.isMDXComponent=!0}}]);