(self.webpackChunkorbit_website=self.webpackChunkorbit_website||[]).push([[3954],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3938:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],p={title:"Updating data"},s=void 0,d={unversionedId:"updating-data",id:"version-0.15/updating-data",isDocsHomePage:!1,title:"Updating data",description:"Data in a source can be updated by applying a transform, which consists of one",source:"@site/versioned_docs/version-0.15/updating-data.md",sourceDirName:".",slug:"/updating-data",permalink:"/docs/0.15/updating-data",editUrl:"https://github.com/orbitjs/orbit/edit/main/website/versioned_docs/version-0.15/updating-data.md",version:"0.15",frontMatter:{title:"Updating data"},sidebar:"version-0.15/docsSidebar",previous:{title:"Data sources",permalink:"/docs/0.15/data-sources"},next:{title:"Querying data",permalink:"/docs/0.15/querying-data"}},l=[{value:"Operations",id:"operations",children:[]},{value:"Transforms",id:"transforms",children:[{value:"Standard transforms",id:"standard-transforms",children:[]},{value:"Transform options",id:"transform-options",children:[]}]}],c={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Data in a source can be updated by applying a transform, which consists of one\nor more operations. Transforms must be applied atomically\u2014all operations\nsucceed or fail together."),(0,o.kt)("h2",{id:"operations"},"Operations"),(0,o.kt)("p",null,"Operations each represent a single change to a record or relationship (e.g.\nadding a record, updating a field, deleting a relationship, etc.)."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Operation")," interface requires one member:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"op")," - a string identifying the type of operation")),(0,o.kt)("p",null,"The other members of an ",(0,o.kt)("inlineCode",{parentName:"p"},"Operation")," are specific to the ",(0,o.kt)("inlineCode",{parentName:"p"},"op"),"."),(0,o.kt)("p",null,"The following standard operations are defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"@orbit/data"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Operation {\n  op: string;\n}\n\ninterface AddRecordOperation extends Operation {\n  op: 'addRecord';\n  record: Record;\n}\n\ninterface ReplaceRecordOperation extends Operation {\n  op: 'replaceRecord';\n  record: Record;\n}\n\ninterface RemoveRecordOperation extends Operation {\n  op: 'removeRecord';\n  record: RecordIdentity;\n}\n\ninterface ReplaceKeyOperation extends Operation {\n  op: 'replaceKey';\n  record: RecordIdentity;\n  key: string;\n  value: string;\n}\n\ninterface ReplaceAttributeOperation extends Operation {\n  op: 'replaceAttribute';\n  record: RecordIdentity;\n  attribute: string;\n  value: any;\n}\n\ninterface AddToRelatedRecordsOperation extends Operation {\n  op: 'addToRelatedRecords';\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecord: RecordIdentity;\n}\n\ninterface RemoveFromRelatedRecordsOperation extends Operation {\n  op: 'removeFromRelatedRecords';\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecord: RecordIdentity;\n}\n\ninterface ReplaceRelatedRecordsOperation extends Operation {\n  op: 'replaceRelatedRecords';\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecords: RecordIdentity[];\n}\n\ninterface ReplaceRelatedRecordOperation extends Operation {\n  op: 'replaceRelatedRecord';\n  record: RecordIdentity;\n  relationship: string;\n  relatedRecord: RecordIdentity;\n}\n")),(0,o.kt)("h2",{id:"transforms"},"Transforms"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Transform")," interface has the following members:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id")," - a string that uniquely identifies the transform"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"operations")," - an array of ",(0,o.kt)("inlineCode",{parentName:"li"},"Operation")," objects"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"options")," - an optional object that represents options that can influence how\na transform is processed")),(0,o.kt)("p",null,'Although transforms can be created "manually", you\'ll probably find it easier\nto use a builder function that returns a transform.'),(0,o.kt)("p",null,"To use a transform builder, pass a function into a source's method that expects\na transform, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"push"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"TranformBuilder")," that's compatible\nwith the source should be applied as an argument. You can then use this builder\nto create one or more operations."),(0,o.kt)("p",null,"For instance, here's how you might update a store with a single record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const earth = {\n  type: 'planet',\n  id: 'earth',\n  attributes: {\n    name: 'Earth'\n  }\n};\n\nstore.update(t => t.addRecord(earth));\n")),(0,o.kt)("p",null,"To perform more than one operation in a single transform, just return an array\nof operations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"store.update(t => [t.addRecord(earth), t.addRecord(jupiter)]);\n")),(0,o.kt)("h3",{id:"standard-transforms"},"Standard transforms"),(0,o.kt)("p",null,"You can use the standard ",(0,o.kt)("inlineCode",{parentName:"p"},"@orbit/data")," transform builder as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Adding a new record\nstore.update(t => t.addRecord({\n  type: 'planet',\n  id: 'earth',\n  attributes: {\n    name: 'Earth'\n  }\n}));\n\n// Replacing an entire record\nstore.update(t => t.replaceRecord({\n  type: 'planet',\n  id: 'earth',\n  attributes: {\n    name: 'Earth',\n    classification: 'terrestrial',\n    atmosphere: true\n  }\n}));\n\n// Removing a record\nstore.update(t => t.removeRecord(\n  { type: 'planet', id: 'earth' }));\n\n// Replacing a key\nstore.update(t => t.replaceKey(\n  { type: 'planet', id: 'earth' },\n  'remoteId',\n  'abc123'));\n\n// Replacing an attribute\nstore.update(t => t.replaceAttribute(\n  { type: 'planet', id: 'earth' },\n  'classification',\n  'gaseous'));\n\n// Adding a member to a to-many relationship\nstore.update(t => t.addToRelatedRecords(\n  { type: 'planet', id: 'jupiter' },\n  'moons',\n  { type: 'moon', id: 'io' }));\n\n// Removing a member from a to-many relationship\nstore.update(t => t.removeFromRelatedRecords(\n  { type: 'planet', id: 'jupiter' },\n  'moons',\n  { type: 'moon', id: 'io' }));\n\n// Replacing every member of a to-many relationship\nstore.update(t => t.replaceRelatedRecords(\n  { type: 'planet', id: 'jupiter' },\n  'moons',\n  [{ type: 'moon', id: 'io' }, { type: 'moon', id: 'europa' }]));\n\n// Replacing a to-one relationship\nstore.update(t => t.replaceRelatedRecord(\n  { type: 'planet', id: 'jupiter' },\n  'solarSystem',\n  { type: 'solarSystem', id: 'ourSolarSystem' }));\n")),(0,o.kt)("h3",{id:"transform-options"},"Transform options"),(0,o.kt)("p",null,"Options can be added to transforms to provide processing instructions to\nparticular sources and to include metadata about transforms."),(0,o.kt)("p",null,"For example, the following transform is given a ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," and contains\ninstructions for the source named ",(0,o.kt)("inlineCode",{parentName:"p"},"remote"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"store.update(t => t.replaceRecord({\n  type: 'planet',\n  id: 'earth',\n  attributes: {\n    name: 'Earth',\n    classification: 'terrestrial',\n    atmosphere: true\n  }\n}), {\n  label: 'Update planet Earth',\n  sources: {\n    remote: {\n      timeout: 100000\n    }\n  }\n});\n")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"label")," can be useful for providing an understanding of actions that have been\nqueued for processing."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"sources: { ${sourceName}: sourceSpecificOptions }")," pattern is used to pass\noptions that only a particular source will understand when processing a\ntransform. In this instance, we're telling our remote source to use a custom\ntimeout when performing this particular update."))}u.isMDXComponent=!0}}]);