(self.webpackChunkorbit_website=self.webpackChunkorbit_website||[]).push([[4961],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(n),h=i,u=m["".concat(l,".").concat(h)]||m[h]||c[h]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6510:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=["components"],s={title:"Modeling data"},l=void 0,d={unversionedId:"modeling-data",id:"modeling-data",isDocsHomePage:!1,title:"Modeling data",description:"Data records must have a normalized structure that's consistent",source:"@site/docs/modeling-data.md",sourceDirName:".",slug:"/modeling-data",permalink:"/docs/next/modeling-data",editUrl:"https://github.com/orbitjs/orbit/edit/main/website/docs/modeling-data.md",version:"current",frontMatter:{title:"Modeling data"},sidebar:"docs",previous:{title:"What's new in v0.17",permalink:"/docs/next/whats-new"},next:{title:"Data sources",permalink:"/docs/next/data-sources"}},p=[{value:"Records",id:"records",children:[{value:"Identity",id:"identity",children:[]},{value:"Keys",id:"keys",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Relationships",id:"relationships",children:[]}]},{value:"Schema",id:"schema",children:[{value:"Model attributes",id:"model-attributes",children:[]},{value:"Model relationships",id:"model-relationships",children:[]},{value:"Model keys",id:"model-keys",children:[]}]}],c={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Data records must have a normalized structure that's consistent\nwith Orbit's expectations as well as the constraints of a particular\napplication."),(0,r.kt)("h2",{id:"records"},"Records"),(0,r.kt)("p",null,'Records are represented as lightweight, serializable POJOs (i.e. "Plain old\nJavaScript objects").'),(0,r.kt)("p",null,"The structure used for records conforms to the ",(0,r.kt)("a",{parentName:"p",href:"http://jsonapi.org/"},"JSON:API"),"\nspecification. Records can have fields that define their identity, attributes,\nand relationships with other records."),(0,r.kt)("p",null,"Here's an example record that represents a planet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  type: 'planet',\n  id: 'earth',\n  attributes: {\n    name: 'Earth',\n    classification: 'terrestrial',\n    atmosphere: true\n  },\n  relationships: {\n    solarSystem: {\n      data: { type: 'solarSystem', id: 'theSolarSystem' }\n    },\n    moons: {\n      data: [\n        { type: 'moon', id: 'theMoon' }\n      ]\n    }\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Just like ",(0,r.kt)("a",{parentName:"p",href:"https://jsonapi.org/format/#document-resource-object-fields"},"JSON:API resource\nfields"),", all the\nfields in an Orbit record share the same namespace and must be unique. A record\ncan not have an attribute and relationship with the same name, nor can it have\nan attribute or relationship named ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."))),(0,r.kt)("h3",{id:"identity"},"Identity"),(0,r.kt)("p",null,"Each record's identity is established by a union of the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - a string that identifies a set of records with a shared definition"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," - a string that uniquely identifies a record of a given ",(0,r.kt)("inlineCode",{parentName:"li"},"type"))),(0,r.kt)("p",null,"Both fields must be defined in order for a record to be identified uniquely."),(0,r.kt)("p",null,"Applications can take one of the following approaches to managing identity:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Auto-generate IDs, typically as v4 UUIDs, and then use the same IDs locally\nand remotely.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Remotely generate IDs and only reference records by those IDs.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'Auto-generate IDs locally and map those IDs to canonical IDs (or "keys")\ngenerated remotely.'))),(0,r.kt)("p",null,"The first approach is the most straightforward, flexible, and requires the least\nconfiguration. However, it is not feasible when working with servers that do not\naccept client-generated IDs."),(0,r.kt)("p",null,"The second approach only works if you never need to generate ",(0,r.kt)("em",{parentName:"p"},"new")," records\nwith Orbit, only reference existing ones generated remotely."),(0,r.kt)("p",null,"The third approach is a pragmatic blend of local and remote generated IDs.\nAlthough mapping IDs requires more configuration and complexity than having a\nsingle ID for each record, this approach does not constrain the capabilities of\nyour application."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It's possible to mix these approaches for different types of records\n(i.e. models) within a given application."))),(0,r.kt)("h3",{id:"keys"},"Keys"),(0,r.kt)("p",null,'When pairing locally-generated IDs, Orbit uses "keys" to support mapping between\nlocal and remote IDs.'),(0,r.kt)("p",null,"Remote IDs should be kept in a ",(0,r.kt)("inlineCode",{parentName:"p"},"keys")," object at the root of a record."),(0,r.kt)("p",null,"For example, the following record has a ",(0,r.kt)("inlineCode",{parentName:"p"},"remoteId")," key that is assigned by a\nserver:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"{\n  type: 'planet',\n  id: '34677136-c0b7-4015-b9e5-57f6fdd16bd2',\n  keys: {\n    remoteId: '123456'\n  }\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"remoteId")," key of ",(0,r.kt)("inlineCode",{parentName:"p"},"123456")," can be mapped to the locally generated ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," using\na ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyMap"),", which can be shared by any sources that need access to the mapping.\nWhen communicating with the server, ",(0,r.kt)("inlineCode",{parentName:"p"},"remoteId")," might be serialized as ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"\u2014such\na translation should occur within the source that communicates directly with the\nremote server (e.g. Orbit's standard ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONAPISource"),")."),(0,r.kt)("h3",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,'Any properties that define a record\'s data, with the exception of relationships\nto other records, should be defined as "attributes".'),(0,r.kt)("p",null,"All attributes should be contained in an ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," object at the root of a\nrecord."),(0,r.kt)("h3",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"Relationships between records should be defined in a ",(0,r.kt)("inlineCode",{parentName:"p"},"relationships")," object at\nthe root of a record."),(0,r.kt)("p",null,"Relationship linkage is specified in a ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object for each relationship."),(0,r.kt)("p",null,"For to-one relationships, linkage should be expressed as a record identity\nobject in the form ",(0,r.kt)("inlineCode",{parentName:"p"},"{ type, id }"),". The absence of a relationship can be\nexpressed as ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,r.kt)("p",null,"For to-many relationships, linkage should be expressed as an array of record\nidentities."),(0,r.kt)("h2",{id:"schema"},"Schema"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/api/records/classes/RecordSchema"},(0,r.kt)("inlineCode",{parentName:"a"},"RecordSchema"))," defines the models allowed in a source, including their keys,\nattributes, and relationships. Typically, a single schema is shared among all\nthe sources in an application."),(0,r.kt)("p",null,"Schemas are defined with their initial settings as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { RecordSchema } from "@orbit/records";\n\nconst schema = new RecordSchema({\n  models: {\n    planet: {\n      attributes: {\n        name: { type: "string" },\n        classification: { type: "string" }\n      },\n      relationships: {\n        moons: { kind: "hasMany", type: "moon", inverse: "planet" }\n      }\n    },\n    moon: {\n      attributes: {\n        name: { type: "string" }\n      },\n      relationships: {\n        planet: { kind: "hasOne", type: "planet", inverse: "moons" }\n      }\n    }\n  }\n});\n')),(0,r.kt)("p",null,"Models should be keyed by their singular name, and should be defined as an\nobject that contains ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"relationships"),", and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"keys"),"."),(0,r.kt)("h3",{id:"model-attributes"},"Model attributes"),(0,r.kt)("p",null,"Attributes may be defined by their ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", which determines what type of data\nthey can contain. An attribute's type may also be used to determine how it\nshould be serialized and validated. Standard attribute types are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"date")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"datetime")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"))),(0,r.kt)("h3",{id:"model-relationships"},"Model relationships"),(0,r.kt)("p",null,"Two kind of relationships between models are allowed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hasOne")," - for to-one relationships"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hasMany")," - for to-many relationships")),(0,r.kt)("p",null,"Relationships must define the related ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and may optionally define their\n",(0,r.kt)("inlineCode",{parentName:"p"},"inverse"),", which should correspond to the name of a relationship on the related\nmodel. Inverse relationships should be defined when relationships must be kept\nsynchronized, so that adding or removing a relationship on the primary model\nresults in a corresponding change on the inverse model."),(0,r.kt)("p",null,"Here's an example of a schema definition that includes relationships with\ninverses:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { RecordSchema } from "@orbit/records";\n\nconst schema = new RecordSchema({\n  models: {\n    planet: {\n      relationships: {\n        moons: { kind: "hasMany", type: "moon", inverse: "planet" }\n      }\n    },\n    moon: {\n      relationships: {\n        planet: { kind: "hasOne", type: "planet", inverse: "moons" }\n      }\n    }\n  }\n});\n')),(0,r.kt)("h3",{id:"model-keys"},"Model keys"),(0,r.kt)("p",null,'When working with remote servers that do not support client-generated IDs, it\'s\nnecessary to correlate locally generated IDs with remotely generated IDs, or\n"keys". Like ',(0,r.kt)("inlineCode",{parentName:"p"},"id"),", keys uniquely identify a record of a particular model type."),(0,r.kt)("p",null,"Keys currently accept no ",(0,r.kt)("em",{parentName:"p"},"standard")," options, so they should be declared with an\nempty options hash as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const schema = new RecordSchema({\n  models: {\n    moon: {\n      keys: { remoteId: {} }\n    },\n    planet: {\n      keys: { remoteId: {} }\n    }\n  }\n});\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Since keys can only be of type ",(0,r.kt)("inlineCode",{parentName:"p"},'"string"'),", it is unnecessary to explicitly\ndeclare this (although ",(0,r.kt)("inlineCode",{parentName:"p"},'{ type: "string" }')," is technically allowed in a key's\ndeclaration)."))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A key such as ",(0,r.kt)("inlineCode",{parentName:"p"},"remoteId")," might be serialized as simply ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," when communicating\nwith a server. However, it's important to distinguish it from the\nclient-generated ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," used within Orbit, so it requires a unique name."))))}m.isMDXComponent=!0}}]);