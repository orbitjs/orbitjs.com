(self.webpackChunkorbit_website=self.webpackChunkorbit_website||[]).push([[4094],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9185:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],s={title:"Data sources"},l=void 0,p={unversionedId:"data-sources",id:"data-sources",isDocsHomePage:!1,title:"Data sources",description:"Sources provide access to data. They vary widely in their capabilities: some",source:"@site/docs/data-sources.md",sourceDirName:".",slug:"/data-sources",permalink:"/docs/next/data-sources",editUrl:"https://github.com/orbitjs/orbit/edit/main/website/docs/data-sources.md",version:"current",frontMatter:{title:"Data sources"},sidebar:"docs",previous:{title:"Modeling data",permalink:"/docs/next/modeling-data"},next:{title:"Updating data",permalink:"/docs/next/updating-data"}},c=[{value:"Base class",id:"base-class",children:[]},{value:"Standard interfaces",id:"standard-interfaces",children:[{value:"Events",id:"events",children:[]},{value:"Data flows",id:"data-flows",children:[]},{value:"Developer-facing interfaces",id:"developer-facing-interfaces",children:[]}]}],d={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Sources provide access to data. They vary widely in their capabilities: some\nsupport interfaces for updating and/or querying records, while others simply\nbroadcast changes."),(0,i.kt)("p",null,'Orbit includes a number of "standard" sources:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@orbit/memory"},"@orbit/memory")," - an in-memory source"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@orbit/jsonapi"},"@orbit/jsonapi")," - a JSON API client"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@orbit/indexeddb"},"@orbit/indexeddb")," - for accessing IndexedDB databases"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@orbit/local-storage"},"@orbit/local-storage")," - for accessing LocalStorage")),(0,i.kt)("p",null,"Custom sources can also be written to access to virtually any source of data."),(0,i.kt)("h2",{id:"base-class"},"Base class"),(0,i.kt)("p",null,"Every source derives from an abstract base class, ",(0,i.kt)("inlineCode",{parentName:"p"},"Source"),", which has a core\nset of capabilities."),(0,i.kt)("p",null,"Sources must be instantiated with a schema. A schema provides sources with an\nunderstanding of the domain-specific data they manage."),(0,i.kt)("p",null,"Let's create a simple schema and memory source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { RecordSchema } from '@orbit/records';\nimport { MemorySource } from '@orbit/memory';\n\n// Create a schema\nconst schema = new RecordSchema({\n  models: {\n    planet: {\n      attributes: {\n        name: { type: 'string' },\n        classification: { type: 'string' }\n      }\n    }\n  }\n});\n\n// Create a memory source that uses the schema\nconst memory = new MemorySource({ schema });\n")),(0,i.kt)("p",null,"All sources can be mutated, although not all sources support ",(0,i.kt)("em",{parentName:"p"},"requests")," to\nmutate. Some sources may only reflect mutations that come from elsewhere, such\nas a source that wraps server-sent events."),(0,i.kt)("p",null,'Because all mutations in Orbit are trackable, sources maintain a log of changes,\nor "transforms". This log represents an ordered history of transforms that have\nbeen applied to a source. The size of this log can be kept in check by\ntruncating it after related sources have been synchronized.'),(0,i.kt)("p",null,'Sources are also all "evented", meaning that they can emit events which\nlisteners can subscribe to. All sources support an event, ',(0,i.kt)("inlineCode",{parentName:"p"},"transform"),", that is\nemitted when that source changes. Most sources emit additional events as well\n(the specifics depend upon their capabilities)."),(0,i.kt)("p",null,"Let's look at an example of a simple mutation triggered by a call to ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Define a record\nconst jupiter = {\n  type: 'planet',\n  id: 'jupiter',\n  attributes: {\n    name: 'Jupiter',\n    classification: 'gas giant'\n  }\n};\n\n// Observe and log all transforms\nmemory.on('transform', (t) => {\n  console.log('transform', t);\n});\n\n// Check the size of the transform log before updates\nconsole.log(`transforms: ${memory.transformLog.length}`);\n\n// Update the memory source with a transform that adds a record\nmemory\n  .update((t) => t.addRecord(jupiter))\n  .then(() => {\n    // Verify that the transform log has grown\n    console.log(`transforms: ${memory.transformLog.length}`);\n  });\n")),(0,i.kt)("p",null,"The following should be logged as a result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"'transforms: 0',\n  'transform',\n  {\n    operations: [\n      {\n        op: 'addRecord',\n        record: {\n          type: 'planet',\n          id: 'jupiter',\n          attributes: {\n            name: 'Jupiter',\n            classification: 'gas giant'\n          }\n        }\n      }\n    ],\n    options: undefined,\n    id: '05e5d20e-02c9-42c4-a083-99662c647fd1'\n  },\n  'transforms: 1';\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Want to learn more about updating data? ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/updating-data"},"See the guide")))),(0,i.kt)("h2",{id:"standard-interfaces"},"Standard interfaces"),(0,i.kt)("p",null,"Orbit includes a number of standard interfaces that may be implemented by\nsources:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Updatable")," - Allows sources to be updated via an ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," method that takes\na transform and returns the updated records that result.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Queryable")," - Allows sources to be queried via a ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," method that receives\na query expression and returns a recordset as a result.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"Syncable")," - Applies a transform or transforms to a source via a ",(0,i.kt)("inlineCode",{parentName:"p"},"sync"),"\nmethod."))),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Pullable")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Pushable")," interfaces have been deprecated in\nv0.17 and are scheduled to be removed in v0.18."))),(0,i.kt)("h3",{id:"events"},"Events"),(0,i.kt)("p",null,"All of the interfaces above emit events that share a common pattern. For an\ninterface with a given method ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", the following events will be emitted:\n",(0,i.kt)("inlineCode",{parentName:"p"},"beforeX"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"xFail"),". For example, updatable sources have an ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),"\nmethod and can emit ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeUpdate"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"updateFail")," events."),(0,i.kt)("p",null,"In addition, any mutations caused by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," will also be emitted with the\ngeneral ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," event."),(0,i.kt)("p",null,"Processing occurs as follows (feel free to substitute ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),", etc.\nfor ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"):"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"x")," is called on a source.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeX")," event is emitted by the source. Any promises that are returned\nfrom listeners will be settled serially. Any errors encountered will prevent\nfurther processing and cause the source to emit the ",(0,i.kt)("inlineCode",{parentName:"p"},"xFail")," event.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"x")," is processed internally by the source. Any errors encountered will\nprevent further processing and cause the source to emit the ",(0,i.kt)("inlineCode",{parentName:"p"},"xFail")," event.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," event is emitted if ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," resulted in any mutations. Any\npromises that are returned from listeners will be settled serially. Errors\nwill NOT prevent further processing.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," event is emitted. Any promises that are returned\nfrom listeners will be settled serially. Errors will NOT prevent further\nprocessing."))),(0,i.kt)("p",null,"There's a clear turning point after ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," has been processed internally by the\nsource. While listeners can block processing of ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeX")," event by\nreturning a promise that fails, after ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," has been processed such failures will\nbe ignored by the emitter."),(0,i.kt)("h3",{id:"data-flows"},"Data flows"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Updatable")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Queryable"),' interfaces participate in the "request flow", in\nwhich requests are made upstream and data flows back down.'),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Syncable"),' interface participates in the "sync flow", in which data flowing\ndownstream is synchronized with other sources.'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Want to learn more about data flows? ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/data-flows"},"See the guide"))),(0,i.kt)("h3",{id:"developer-facing-interfaces"},"Developer-facing interfaces"),(0,i.kt)("p",null,"Generally speaking, developers will primarily interact the ",(0,i.kt)("inlineCode",{parentName:"p"},"Updatable")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Queryable")," interfaces. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Syncable")," interface is used primarily via\ncoordination strategies."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"See guides that cover ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/querying-data"},"querying data"),",\n",(0,i.kt)("a",{parentName:"p",href:"/docs/next/updating-data"},"updating data"),", and\n",(0,i.kt)("a",{parentName:"p",href:"/docs/next/coordination"},"configuring coordination strategies"),".")))}m.isMDXComponent=!0}}]);