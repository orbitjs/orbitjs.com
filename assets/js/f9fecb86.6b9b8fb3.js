"use strict";(self.webpackChunkorbit_website=self.webpackChunkorbit_website||[]).push([[5176],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2740:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var n=a(3117),r=a(102),i=(a(7294),a(3905)),o=["components"],s={title:"What's new in v0.17"},l=void 0,p={unversionedId:"whats-new",id:"whats-new",title:"What's new in v0.17",description:"This is a distillation of what's new in Orbit v0.17, intended as a reference for",source:"@site/docs/whats-new.md",sourceDirName:".",slug:"/whats-new",permalink:"/docs/whats-new",editUrl:"https://github.com/orbitjs/orbit/edit/main/website/docs/whats-new.md",tags:[],version:"current",frontMatter:{title:"What's new in v0.17"},sidebar:"docs",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Modeling data",permalink:"/docs/modeling-data"}},d=[{value:"New Site + API Reference",id:"new-site--api-reference",children:[],level:2},{value:"Improved, strict typings throughout",id:"improved-strict-typings-throughout",children:[],level:2},{value:"Extraction of <code>@orbit/records</code> from <code>@orbit/data</code>",id:"extraction-of-orbitrecords-from-orbitdata",children:[],level:2},{value:"Singular vs. multi-expression queries",id:"singular-vs-multi-expression-queries",children:[],level:2},{value:"Singular vs. multi-operation transforms",id:"singular-vs-multi-operation-transforms",children:[],level:2},{value:"Full vs. data-only responses",id:"full-vs-data-only-responses",children:[],level:2},{value:"Improved response typings",id:"improved-response-typings",children:[],level:2},{value:"Deprecation of <code>Pullable</code> and <code>Pushable</code> interfaces",id:"deprecation-of-pullable-and-pushable-interfaces",children:[],level:2},{value:"Transform buffers for faster cache processing",id:"transform-buffers-for-faster-cache-processing",children:[],level:2},{value:"New serializers",id:"new-serializers",children:[],level:2},{value:"New validators",id:"new-validators",children:[],level:2},{value:"Record normalizers",id:"record-normalizers",children:[],level:2},{value:"Synchronous change tracking in memory forks",id:"synchronous-change-tracking-in-memory-forks",children:[],level:2},{value:"New memory cache capabilities",id:"new-memory-cache-capabilities",children:[],level:2},{value:"Debug mode",id:"debug-mode",children:[],level:2},{value:"Increased reliance on The Platform\u2122",id:"increased-reliance-on-the-platform",children:[],level:2},{value:"Contributors",id:"contributors",children:[],level:2}],c={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a distillation of what's new in Orbit v0.17, intended as a reference for\ndevelopers who need to upgrade their apps and libraries from v0.16."),(0,i.kt)("p",null,"If you're brand new to Orbit yourself, you may wish to skip this section in\norder to explore Orbit's latest features in a broader context."),(0,i.kt)("h2",{id:"new-site--api-reference"},"New Site + API Reference"),(0,i.kt)("p",null,"v0.17 is Orbit's first release that comes with ",(0,i.kt)("a",{parentName:"p",href:"/docs/api"},"API docs")," for\nall its packages. These docs are generated by ",(0,i.kt)("a",{parentName:"p",href:"https://typedoc.org/"},"TypeDoc"),"\nfrom Orbit's typings and code annotations. Although a bit sparse for now, this\nreference should only improve with time and help from the community.\nContributions will be most appreciated!"),(0,i.kt)("h2",{id:"improved-strict-typings-throughout"},"Improved, strict typings throughout"),(0,i.kt)("p",null,"The TypeScript in all of Orbit's packages has been improved to the extent that\nit is now all compiled with the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#strict"},"strict")," flag. This has allowed\nus to refactor more confidently, improve our documentation, and provide a\nbetter developer experience all around."),(0,i.kt)("h2",{id:"extraction-of-orbitrecords-from-orbitdata"},"Extraction of ",(0,i.kt)("inlineCode",{parentName:"h2"},"@orbit/records")," from ",(0,i.kt)("inlineCode",{parentName:"h2"},"@orbit/data")),(0,i.kt)("p",null,"As part of the push to improve typings, it became clear that\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/data/"},(0,i.kt)("inlineCode",{parentName:"a"},"@orbit/data"))," contains a number of interfaces and classes\nthat could prove useful for ",(0,i.kt)("em",{parentName:"p"},"any")," type of data, not just records. Thus,\nrecord-specific types and classes were extracted into a new package:\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/records/"},(0,i.kt)("inlineCode",{parentName:"a"},"@orbit/records")),"."),(0,i.kt)("p",null,"Please review the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/records/modules"},"exports")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"@orbit/records")," for\na complete listing of classes, interfaces, and other types that have been moved\nto this new package."),(0,i.kt)("p",null,"Be aware that several exports have been renamed to be explicit about being\nrecord-specific. For instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," is now ",(0,i.kt)("inlineCode",{parentName:"p"},"RecordSchema"),", so you'll want to\nmake this refactor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"- import { Schema } from '@orbit/data';\n+ import { RecordSchema } from '@orbit/records';\n")),(0,i.kt)("p",null,"Apologies for this breaking change and the refactoring it requires. We're trying\nto settle the scope of each package prior to v1.0."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Breaking change")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please review all your direct imports from ",(0,i.kt)("inlineCode",{parentName:"p"},"@orbit/data")," and replace them as\nneeded with imports from ",(0,i.kt)("inlineCode",{parentName:"p"},"@orbit/records"),"."))),(0,i.kt)("h2",{id:"singular-vs-multi-expression-queries"},"Singular vs. multi-expression queries"),(0,i.kt)("p",null,"In v0.16, each ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," could only have a single ",(0,i.kt)("inlineCode",{parentName:"p"},"expression"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// v0.16\nexport interface Query {\n  id: string;\n  expression: QueryExpression;\n  options?: any;\n}\n")),(0,i.kt)("p",null,"Now, ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/data/interfaces/Query"},(0,i.kt)("inlineCode",{parentName:"a"},"Query"))," is typed as follows, with\n",(0,i.kt)("inlineCode",{parentName:"p"},"expressions")," that can be singular or an array of query expressions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// v0.17\nexport interface Query<QE extends QueryExpression> {\n  id: string;\n  expressions: QE | QE[];\n  options?: RequestOptions;\n}\n")),(0,i.kt)("p",null,"This allows sources, such as\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/jsonapi/classes/JSONAPISource"},(0,i.kt)("inlineCode",{parentName:"a"},"JSONAPISource")),", to optionally perform\nthese expressions in parallel, which it does now by default."),(0,i.kt)("p",null,"Now that queries can contain multiple expressions just like transforms can\ncontain multiple operations, there needs to be a clear and consistent way to\nbuild them. And likewise, the expectation needs to be clear about the form\nin which results should be returned."),(0,i.kt)("p",null,"Here's a single expression to a query builder, which can be expected to return\na single result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const earth = await source.query((q) =>\n  q.findRecord({ type: 'planet', id: 'earth' })\n);\n")),(0,i.kt)("p",null,"That same expression could be passed in an array, which will cause results to be\nreturned in an array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const [earth] = await source.query((q) => [\n  q.findRecord({ type: 'planet', id: 'earth' })\n]);\n")),(0,i.kt)("p",null,"And of course, that array could be expanded to include more than one expression:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const [earth, jupiter, saturn] = await source.query((q) => [\n  q.findRecord({ type: 'planet', id: 'earth' }),\n  q.findRecord({ type: 'planet', id: 'jupiter' }),\n  q.findRecord({ type: 'planet', id: 'saturn' })\n]);\n")),(0,i.kt)("p",null,"As mentioned above, this query may be handled with 3 parallel requests, but will\nonly resolve when all have completed successfully."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Breaking change")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Although most developers typically do not interact with queries directly, if\nyou do it's important to note the change from ",(0,i.kt)("inlineCode",{parentName:"p"},"expression")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"expressions"),"."))),(0,i.kt)("h2",{id:"singular-vs-multi-operation-transforms"},"Singular vs. multi-operation transforms"),(0,i.kt)("p",null,"All the patterns mentioned above for queries also apply to transforms."),(0,i.kt)("p",null,"A single operation provided to a transform builder will return a single result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const earth = await source.update((t) =>\n  t.addRecord({ type: 'planet', id: 'earth' })\n);\n")),(0,i.kt)("p",null,"The same expression passed in an array will cause results to be returned in an\narray:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const [earth] = await source.update((t) => [\n  t.addRecord({ type: 'planet', id: 'earth' })\n]);\n")),(0,i.kt)("p",null,"And as before, multi-operation transforms will produce an array of results:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const [earth, jupiter, saturn] = await source.update((t) => [\n  t.addRecord({ type: 'planet', id: 'earth' }),\n  t.addRecord({ type: 'planet', id: 'jupiter' }),\n  t.addRecord({ type: 'planet', id: 'saturn' })\n]);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/data/interfaces/Transform"},(0,i.kt)("inlineCode",{parentName:"a"},"Transform"))," interface has changed\nsubtly such that ",(0,i.kt)("inlineCode",{parentName:"p"},"operations")," can now be singular or an array, to parallel\n",(0,i.kt)("inlineCode",{parentName:"p"},"Query#expressions"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// v0.17\nexport interface Transform<O extends Operation> {\n  id: string;\n  operations: O | O[];\n  options?: RequestOptions;\n}\n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Breaking changes")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The change that allows ",(0,i.kt)("inlineCode",{parentName:"p"},"Transform"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"operations")," to be singular is breaking.\nYou may wish to use a utility function such as\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/utils/modules#toarray"},(0,i.kt)("inlineCode",{parentName:"a"},"toArray"))," to interact with ",(0,i.kt)("inlineCode",{parentName:"p"},"operations"),"\nuniformly as an array."),(0,i.kt)("p",{parentName:"div"},"Also note that, in v0.16, calling ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," with a single operation in an array\nwould return a singular result. It will now return that same result as the\nsingle member of an array."))),(0,i.kt)("h2",{id:"full-vs-data-only-responses"},"Full vs. data-only responses"),(0,i.kt)("p",null,"All requests (queries and updates) can now be made with a ",(0,i.kt)("inlineCode",{parentName:"p"},"{ fullResponse: true\n}")," option to receive responses as a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/data/interfaces/FullResponse"},(0,i.kt)("inlineCode",{parentName:"a"},"FullResponse")),". Full responses include\nthe following members:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"data")," - the primary data that would be returned without the ",(0,i.kt)("inlineCode",{parentName:"p"},"fullResponse"),"\noption")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"details")," - response details particular to the source. For a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/memory/classes/MemorySource"},(0,i.kt)("inlineCode",{parentName:"a"},"MemorySource")),", this will include\napplied and inverse operations. For a\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/jsonapi/classes/JSONAPISource"},(0,i.kt)("inlineCode",{parentName:"a"},"JSONAPISource")),", this will include\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Response"},(0,i.kt)("inlineCode",{parentName:"a"},"Response")),"\nobjects and documents.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"transforms")," - these are the transforms applied as a result of this request.\nThey are always emitted with a ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," event, which hooks into Orbit's\nsync flow.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"sources")," - a map of source-specific response details from downstream sources\nthat were engaged in fulfilling this request."))),(0,i.kt)("p",null,"It's now up to you just how much of this information you want at the call site.\nThe following requests will be handled the same internally:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Just the data\nconst planets = await source.query((q) => q.findRecords('planet'));\n\n// All the details\nconst { data, details, transforms, sources } = await source.query(\n  (q) => q.findRecords('planet'),\n  { fullResponse: true }\n);\n")),(0,i.kt)("h2",{id:"improved-response-typings"},"Improved response typings"),(0,i.kt)("p",null,"Speaking of responses, it's now possible to type them using ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/generics.html"},"TypeScript\ngenerics")," instead\nof relying on type coercion (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"response as Type"),")."),(0,i.kt)("p",null,"Standard data requests can type the response data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// query<RequestData>(queryOrExpressions, options, id?): Promise<RequestData>\nconst planets = await source.query<Planet[]>((q) => q.findRecords('planet'));\n")),(0,i.kt)("p",null,"Full data requests can type the response data, details, and operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// query<RequestData, RequestDetails, RequestOperation>(queryOrExpressions, options, id?): Promise<FullResponse<RequestData, RequestDetails, RequestOperation>>;\nconst { data, details, transforms, sources } = await source.query<\n  Planet[],\n  JSONAPIResponse[],\n  RecordOperation\n>((q) => q.findRecords('planet'), { fullResponse: true });\n")),(0,i.kt)("h2",{id:"deprecation-of-pullable-and-pushable-interfaces"},"Deprecation of ",(0,i.kt)("inlineCode",{parentName:"h2"},"Pullable")," and ",(0,i.kt)("inlineCode",{parentName:"h2"},"Pushable")," interfaces"),(0,i.kt)("p",null,"Now that responses can include full processing details, everything that was\nunique to the ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," methods on source is redundant. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Pullable"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"Pushable")," interfaces have been deprecated to focus on the more capable\n",(0,i.kt)("inlineCode",{parentName:"p"},"Queryable")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Updatable")," interfaces for making requests."),(0,i.kt)("p",null,"One common use case for ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," was restoring from backup:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const transform = await backup.pull((q) => q.findRecords());\nawait memory.push(transform);\n")),(0,i.kt)("p",null,"This can be achieved as follows with ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"sync")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"update"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const allRecords = await backup.query((q) => q.findRecords());\nawait memory.sync((t) => allRecords.map((r) => t.addRecord(r)));\n")),(0,i.kt)("p",null,"And if you do want access to the transforms that result from a request, specify\nthat you want a full response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const { transforms } = await source.update((t) => [\n    t.addRecord(type: 'planet', attributes: { name: 'Earth' }),\n    t.addRecord(type: 'planet', attributes: { name: 'Jupiter' })\n  ],\n  { fullResponse: true }\n);\n")),(0,i.kt)("h2",{id:"transform-buffers-for-faster-cache-processing"},"Transform buffers for faster cache processing"),(0,i.kt)("p",null,"Record-cache-based sources that interact with browser storage have had\nperformance issues when dealing with large datasets, especially when paired with\nread/write heavy processors that ensure relationship tracking and correctness. A\nnew paradigm has been developed, the ",(0,i.kt)("inlineCode",{parentName:"p"},"RecordTransformBuffer"),", that acts as a\nmemory buffer for these operations."),(0,i.kt)("p",null,"For now, using this buffer is opt-in, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"{ useBuffer: true }")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"await indexeddbSource.update((t) => [\n    t.addRecord(type: 'planet', attributes: { name: 'Earth' }),\n    t.addRecord(type: 'planet', attributes: { name: 'Jupiter' })\n  ],\n  { useBuffer: true }\n);\n")),(0,i.kt)("p",null,"Performance improvements are quite promising, and stability seems solid."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The only edge cases we've found to be concerned about are related to cascading\ndeletes, which are triggered when record relationships are defined with\n",(0,i.kt)("inlineCode",{parentName:"p"},"dependent: delete"),". In those cases, the cascade may not be as complete in the\nbuffer as in the actual cache, so we recommend avoiding transform buffers for\nnow."))),(0,i.kt)("h2",{id:"new-serializers"},"New serializers"),(0,i.kt)("p",null,"Concepts of serialization have, up until now, been very specific to usage by the\n",(0,i.kt)("inlineCode",{parentName:"p"},"JSONAPISource"),", and particularly the ",(0,i.kt)("inlineCode",{parentName:"p"},"JSONAPISerializer")," class. This class has\nbeen deprecated and replaced with a series of composable serializers all build\nupon a simple and flexible\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/serializers/interfaces/Serializer"},(0,i.kt)("inlineCode",{parentName:"a"},"Serializer"))," interface. This\ninterface, as well as some serializers for primitives (booleans, dates,\ndate-times, etc.) have been published in a new package,\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/serializers/"},(0,i.kt)("inlineCode",{parentName:"a"},"@orbit/serializers")),"."),(0,i.kt)("p",null,"New serializers particular to JSON:API have also been added to\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/jsonapi/"},(0,i.kt)("inlineCode",{parentName:"a"},"@orbit/jsonapi")),", including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSONAPIDocumentSerializer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSONAPIResourceSerializer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSONAPIResourceIdentitySerializer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSONAPIResourceFieldSerializer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSONAPIOperationSerializer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"JSONAPIOperationsDocumentSerializer"))),(0,i.kt)("p",null,'These new serializers remove some of the default behaviors present in v0.16 -\nresource fields and types in documents are no longer dasherized and pluralized,\nbut are left "as is" in camelized form. This lines up with the new\nrecommendations for the JSON:API spec and creates much less work by default.'),(0,i.kt)("p",null,"Each of these classes can be overridden to provide custom serialization\nbehavior. You could then provide those custom classes when creating your source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = new JSONAPISource({\n  schema,\n  serializerClassFor: buildSerializerClassFor({\n    [JSONAPISerializers.Resource]: MyCustomResourceSerializer,\n    [JSONAPISerializers.ResourceType]: MyCustomResourceTypeSerializer\n  })\n});\n")),(0,i.kt)("p",null,"Alternatively, you can use the standard serializers but provide custom settings\nfor those serializers. For example, here are settings that match the previous\ndefault serialization options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const source = new JSONAPISource({\n  schema,\n  serializerSettingsFor: buildSerializerSettingsFor({\n    sharedSettings: {\n      // Optional: Custom `pluralize` / `singularize` inflectors that know about\n      // your app's unique data.\n      inflectors: {\n        pluralize: buildInflector(\n          { person: 'people' }, // custom mappings\n          (input) => `${input}s` // naive pluralizer, specified as a fallback\n        ),\n        singularize: buildInflector(\n          { people: 'person' }, // custom mappings\n          (arg) => arg.substring(0, arg.length - 1) // naive singularizer, specified as a fallback\n        )\n      }\n    },\n    // Serialization settings according to the type of serializer\n    settingsByType: {\n      [JSONAPISerializers.ResourceField]: {\n        serializationOptions: { inflectors: ['dasherize'] }\n      },\n      [JSONAPISerializers.ResourceFieldParam]: {\n        serializationOptions: { inflectors: ['dasherize'] }\n      },\n      [JSONAPISerializers.ResourceFieldPath]: {\n        serializationOptions: { inflectors: ['dasherize'] }\n      },\n      [JSONAPISerializers.ResourceType]: {\n        serializationOptions: { inflectors: ['pluralize', 'dasherize'] }\n      },\n      [JSONAPISerializers.ResourceTypePath]: {\n        serializationOptions: { inflectors: ['pluralize', 'dasherize'] }\n      }\n    }\n  })\n});\n")),(0,i.kt)("h2",{id:"new-validators"},"New validators"),(0,i.kt)("p",null,"A common source of problems for Orbit developers has been using data that is\nmalformed or doesn't align with a schema's expectations. This can cause\nconfusing errors during processing by a cache or downstream source."),(0,i.kt)("p",null,'To address this problem, we\'re introducing "validators", which are shipped in a\nnew package ',(0,i.kt)("a",{parentName:"p",href:"/docs/api/validators/"},(0,i.kt)("inlineCode",{parentName:"a"},"@orbit/validators"))," that includes some\nvalidators for primitive types. Validators that are record-specific have also\nbeen included in ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/records/"},(0,i.kt)("inlineCode",{parentName:"a"},"@orbit/records")),"."),(0,i.kt)("p",null,"By default, each source will build its own set of validators and use them\nautomatically. You can instead share a common set of validators via the\n",(0,i.kt)("inlineCode",{parentName:"p"},"validatorFor")," settings. And you can opt-out of using validators entirely by\nconfiguring your sources with ",(0,i.kt)("inlineCode",{parentName:"p"},"{ autoValidate: false }"),"."),(0,i.kt)("h2",{id:"record-normalizers"},"Record normalizers"),(0,i.kt)("p",null,"When building queries and transforms, some scenarios have been more tedious than\nnecessary: identifying records by a key instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", for instance, or using\na model class from a lib like ember-orbit to reference a record instead of its\njson identity."),(0,i.kt)("p",null,"A new abstraction has been added to make query and transform builders more\nflexible: record normalizers. Record normalizers implement the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/records/interfaces/RecordNormalizer"},(0,i.kt)("inlineCode",{parentName:"a"},"RecordNormalizer"))," interface and\nconvert record identities and/or data into a normalized form."),(0,i.kt)("p",null,"The new base normalizer now allows ",(0,i.kt)("inlineCode",{parentName:"p"},"{ type, key, value }")," to be used anywhere\nthat ",(0,i.kt)("inlineCode",{parentName:"p"},"{ type, id }")," identities can be used, which significantly reduces the\nannoyance of working with remote keys."),(0,i.kt)("h2",{id:"synchronous-change-tracking-in-memory-forks"},"Synchronous change tracking in memory forks"),(0,i.kt)("p",null,"Previously, memory source forks behaved precisely like other memory sources:\nevery trackable update applied at the source level (and thus async). Now, the\ndefault (but overrideable) behavior is to track changes at the cache level in\nforks. Thus synchronous changes can be made to a forked cache and then merged\nback into the base source."),(0,i.kt)("p",null,"This improves the DX for the most common use case for forks: editing form data\nin isolation before merging coalesced changes back to the base. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// (sync) fork a base memory source\nlet fork = source.fork();\n\n// (sync) add jupiter synchronously to the forked source's cache\nfork.cache.update((t) =>\n  t.addRecord({\n    type: 'planet',\n    id: 'jupiter',\n    attributes: { name: 'Jupiter' }\n  })\n);\n\n// (async) merge changes from the fork back to its base\nawait source.merge(fork);\n\n// (async) jupiter should now be in the base source (as well as its cache)\nlet jupiter = await source.query((q) =>\n  q.findRecord({ type: 'planet', id: 'jupiter' })\n);\n")),(0,i.kt)("p",null,"If you want to continue to track changes only at the source-level and have\n",(0,i.kt)("inlineCode",{parentName:"p"},"merge")," work only with those changes, pass the following configuration setting\nwhen you fork a source:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"let fork = source.fork({\n  cacheSettings: { trackUpdateOperations: false }\n});\n")),(0,i.kt)("p",null,"This will prevent update tracking at the cache level and will signal to ",(0,i.kt)("inlineCode",{parentName:"p"},"merge"),"\nthat only transforms applied at the source-level should be merged."),(0,i.kt)("h2",{id:"new-memory-cache-capabilities"},"New memory cache capabilities"),(0,i.kt)("p",null,"In addition to the above improvements to memory sources, v0.17 also adds the\nfollowing methods to ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/memory/classes/MemoryCache"},(0,i.kt)("inlineCode",{parentName:"a"},"MemoryCache")),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fork")," - creates a new cache based on this one."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"merge")," - merges changes from a forked cache back into this cache."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rebase")," - resets this cache's state to that of its ",(0,i.kt)("inlineCode",{parentName:"li"},"base")," and then replays\nany update operations.")),(0,i.kt)("p",null,'Memory cache forking / merging / rebasing is a lighter-weight way of\n"branching" changes, that can ultimately be merged back into a source.\nCache-level forking can be paired with source-level forking for a lot of\nflexibility and power.'),(0,i.kt)("h2",{id:"debug-mode"},"Debug mode"),(0,i.kt)("p",null,"A new ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," setting has been added to the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/core/interfaces/OrbitGlobal"},(0,i.kt)("inlineCode",{parentName:"a"},"Orbit")),' global, that toggles between\nusing a more verbose, developer-friendly "debug" mode of Orbit vs. a leaner,\nmore performant production mode.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Debug mode is enabled by default. ")," Some standard features of debug mode\ninclude deprecation warnings and extra debug-friendly verifications and\nmessaging."),(0,i.kt)("p",null,"To disable debug mode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Orbit } from '@orbit/core';\n\n// disable debug mode\nOrbit.debug = false;\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For several releases in the v0.17 beta cycle, debug mode was used to control\nwhether validators would be created by default. This is no longer the case\n","\u2014"," validators will now always be used within sources and caches unless\ndisabled using the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoValidate: false")," setting described above. This provides\nmore fine-grained control over validation settings throughout your app and its\nsources."))),(0,i.kt)("h2",{id:"increased-reliance-on-the-platform"},"Increased reliance on The Platform\u2122"),(0,i.kt)("p",null,"Orbit's codebase continues to evolve with the web, adopting new ES language and\nweb platform features as they are released. Custom utilities have been gradually\ndeprecated and phased out of the codebase (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"isArray")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.isArray"),"),\nnew language features such as nullish coalescing and optional chaining have been\nadopted, and platform features such as\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID"},(0,i.kt)("inlineCode",{parentName:"a"},"crypto.randomUUID")),"\nhave been adopted (with a fallback implementation if unavailable)."),(0,i.kt)("h2",{id:"contributors"},"Contributors"),(0,i.kt)("p",null,"Many thanks to the contributors who made v0.17 possible:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pawe\u0142 Bator (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/jembezmamy"},"@jembezmamy"),")"),(0,i.kt)("li",{parentName:"ul"},"Philipp Brumm (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/brumm"},"@brumm"),")"),(0,i.kt)("li",{parentName:"ul"},"Christian (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/makepanic"},"@makepanic"),")"),(0,i.kt)("li",{parentName:"ul"},"Miguel Camba (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cibernox"},"@cibernox"),")"),(0,i.kt)("li",{parentName:"ul"},"Paul Chavard (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/tchak"},"@tchak"),")"),(0,i.kt)("li",{parentName:"ul"},"Michiel de Vos (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Michiel87"},"@Michiel87"),")"),(0,i.kt)("li",{parentName:"ul"},"Dan Gebhardt (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/dgeb"},"@dgeb"),")"),(0,i.kt)("li",{parentName:"ul"},"Brad Jones (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/bradjones1"},"@bradjones1"),")"),(0,i.kt)("li",{parentName:"ul"},"Andreas Minnich (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/enspandi"},"@enspandi"),")"),(0,i.kt)("li",{parentName:"ul"},"Clemens Mueller (",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pangratz"},"@pangratz"),")")))}u.isMDXComponent=!0}}]);